#!/usr/bin/python
# -*- coding: utf-8 -*-

import sjconf, sys, os

class SJConfCLI:

    VERSION = '@PACKAGE_VERSION@'

    class BadParam:
        def __init__(self, name):
            self.name = name

    def _get_params(self, argv, nb):
        if len(argv) < nb:
            raise SJConfCLI.BadParam("nb")
        ret = argv[0:nb]
        for i in range(0, nb):
            argv.pop(0)
        return ret

    def __init__(self, argv = None):
        self.get = []
        self.sets = []
        self.list_adds = []
        self.list_removes = []
        self.sequence_adds = []
        self.sequence_removes = []
        self.delete_sections = []
        self.delete_keys = []
        self.files_to_install = []
        self.files_to_uninstall = []
        self.plugins_to_enable = []
        self.plugins_to_disable = []
        self.profiles_to_enable = []
        self.profiles_to_disable = []
        self.services_to_reload = []
        self.services_to_restart = []
        self.changes = False
        self.quiet = False
        self.verbose = False
        self.show_diff = False
        self.save = False
        self.deploy = False
        self.backup = True
        self.show_local_conf = False
        self.plugins_list = False
        self.profiles_list = False
        if argv == None:
            argv = list(sys.argv)
        bin, argv = argv[0], argv[1:]
        self._parse_args(bin, argv)
        self._verify_args()
        self.sjconf = sjconf.SJConf(verbose = self.verbose, logger = self._my_print)

    def _usage(self, bin, exit_code):
        print '''%s usage:
        -e                                       : open local.conf on an EDITOR
        --version                                : print version and exit
        --diff                                   : show “diff -u” between old and new configuration files
        --save                                   : save modification (mandatory to deploy)
        --deploy                                 : deploy configuration
        --no-backup                              : do not backup configuration files.
        --restart plugin                         : restart all services of “plugin”. If “plugin” is “all”, then restart all services of all plugins.
        --reload plugin                          : reload all services of ”plugin”. If ”plugin” is ”all”, then reload all services of all plugins.
        --get section key                        : get a configuration key
        --set section key value                  : set a configuration key
        --add-to-list section key value          : add a value to a configuration key
        --remove-from-list section key value     : remove a value from a configuration key
        --add-to-sequence section key value      : add a value to a configuration key
        --remove-from-sequence section key value : remove a value from a configuration key
        --delete-key section key                 : delete a key within a section
        --delete-section section                 : delete a complete section
        --install-plugin [--link] plugin         : install “plugin” into the plugins path; if --link is given, use a symbolic link
        --uninstall-plugin plugin                : uninstall “plugin” from the plugins path
        --enable-plugin plugin                   : add “plugin” to the list of plugins to use
        --disable-plugin plugin                  : remove “plugin” from the list of plugins to use
        --list-plugins                           : list installed plugins
        --list-profiles                          : list installed profiles
        --install-template [--link] template     : install “template” into the templates path; if --link is given, use a symbolic link
        --uninstall-template template            : uninstall “plugin” from the templates path
        --install-conf [--link] conf             : install “conf” into the “base” configuration directory; if --link is given, use a symbolic link
        --uninstall-conf conf                    : uninstall “conf” from the base.conf file, “conf” should be the basename of a conf file previously installed
        --install-profile [--link] profile       : install “profile” file into the configuration directory; if --link is given, use a symbolic link
        --uninstall-profile profile              : uninstall “profile” file, “profile” should be the basename of a profile file previously installed
        --enable-profile profile level           : enable the profile “profile” at level “level”
        --disable-profile profile                : disable the profile “profile”
''' % (bin)
        if exit_code:
            self._my_print("No modification done on configuration")
        sys.exit(exit_code)

    def _parse_args(self, bin, argv):
        if not argv:
            self.show_local_conf = True
        while len(argv):
            cmd, argv = argv[0], argv[1:]
            try:
                if cmd == '-e':
                    editor = os.getenv("EDITOR") or "vim"
                    os.system("%s @sjconfconfdir@/local.conf" % editor)
                    sys.exit(0)
                elif cmd == '--version':
                    print os.path.basename(bin), SJConfCLI.VERSION
                    print 'Copyright © 2008 SmartJog'
                    print 'This is proprietary software, you are not allowed to change nor reprofileute it.'
                    sys.exit(0)
                elif cmd == '--deploy':
                    self.deploy = True
                elif cmd == '--no-backup':
                    self.backup = False
                elif cmd == '-h' or cmd == '--help':
                     self._usage(bin, 0)
                elif cmd == '-v' or cmd == '--verbose':
                    self.verbose = True
                elif cmd == '--diff':
                    self.show_diff = True
                elif cmd == '--quiet':
                    self.quiet = True
                elif cmd == '--save':
                    self.save = True
                elif cmd == '--restart':
                    self.services_to_restart += self._get_params(argv, 1)
                elif cmd == '--reload':
                    self.services_to_reload += self._get_params(argv, 1)
                elif cmd == '--get':
                    self.get = self._get_params(argv, 2)
                elif cmd == '--set':
                    self.sets += [self._get_params(argv, 3)]
                elif cmd == '--add-to-list':
                    self.list_adds.append(self._get_params(argv, 3))
                elif cmd == '--remove-from-list':
                    self.list_removes.append(self._get_params(argv, 3))
                elif cmd == '--add-to-sequence':
                    self.sequence_adds.append(self._get_params(argv, 3))
                elif cmd == '--remove-from-sequence':
                    self.sequence_removes.append(self._get_params(argv, 3))
                elif cmd == '--delete-section':
                    self.delete_sections.append(self._get_params(argv, 1))
                elif cmd == '--delete-key':
                    self.delete_keys.append(self._get_params(argv, 2))
                elif cmd.startswith('--install-'):
                    if len(argv) < 1:
                        raise SJConfCLI.BadParam(cmd)
                    link = (argv[0] == '--link' and argv.pop(0) and True) or False
                    self.files_to_install.append([cmd.replace('--install-', ''), self._get_params(argv, 1)[0], link])
                elif cmd.startswith('--uninstall-'):
                    self.files_to_uninstall.append([cmd.replace('--uninstall-', ''), self._get_params(argv, 1)[0]])
                elif cmd == '--enable-plugin':
                    self.plugins_to_enable += self._get_params(argv, 1)
                elif cmd == '--disable-plugin':
                    self.plugins_to_disable += self._get_params(argv, 1)
                elif cmd == '--list-plugins':
                    self.plugins_list = True
                elif cmd == '--list-profiles':
                    self.profiles_list = True
                elif cmd == '--enable-profile':
                    self.profiles_to_enable.append(self._get_params(argv, 2))
                elif cmd == '--disable-profile':
                    self.profiles_to_disable += self._get_params(argv, 1)
                else:
                    print 'Incorrect command : %s\n' % cmd
                    self._usage(bin, 1)
            except SJConfCLI.BadParam, param:
                print 'Incorrect %s command\n' % param.name
                self._usage(bin, 1)
        self.changes = (self.sets or self.list_adds or self.list_removes or self.sequence_adds or self.sequence_removes or self.delete_sections or self.delete_keys)

    def _verify_args(self):
        if self.get:
            if self.changes or self.deploy or self.save or self.services_to_restart:
                print 'Cannot mix get command and other command'
                sys.exit(0)
        if self.changes and self.deploy and not (self.save):
            print 'You should add the --save parameter to save configuration before deploying it'
            sys.exit(1)

    def _my_print(self, str):
        if not self.quiet: print str

    def run(self):
        if self.verbose:
            self.sjconf._load_conf_base()
            self.sjconf._load_conf_local()
            self._my_print('Using base configuration file: %s' % self.sjconf.confs['base'].file_path)
            self._my_print('Using local configuration file: %s' % self.sjconf.confs['local'].file_path)
            self._my_print('')

        if self.show_local_conf:
            self.sjconf._load_conf_local()
            self._my_print(open(self.sjconf.confs['local'].file_path).read())

        if self.files_to_install:
            for self.file_to_install in self.files_to_install:
                self.sjconf.file_install(*self.file_to_install)

        if self.files_to_uninstall:
            for self.file_to_uninstall in self.files_to_uninstall:
                self.sjconf.file_uninstall(*self.file_to_uninstall)

        if self.plugins_to_enable:
            for self.plugin_to_enable in self.plugins_to_enable:
                self.sjconf.plugin_enable(self.plugin_to_enable)

        if self.plugins_to_disable:
            for self.plugin_to_disable in self.plugins_to_disable:
                self.sjconf.plugin_disable(self.plugin_to_disable)

        if self.plugins_list:
            plugins_list = self.sjconf.plugins_infos()
            keys = plugins_list.keys()
            keys.sort()
            for key in keys:
                plugin_info = plugins_list[key]
                self._my_print('Plugin %s' % (plugin_info['plugin'].name()))
                self._my_print('  Version: %s' % (plugin_info['plugin'].version()))
                self._my_print('  Enabled: %s' % (sjconf.Type.Bool.bool_to_str(plugin_info, {}, 'is_enabled')['is_enabled']))
                if len(plugin_info['plugin'].dependencies()) > 0:
                    self._my_print('  Dependencies:')
                    for dependency_name, dependency in plugin_info['dependencies'].items():
                        self._my_print('    Plugin %s:' % (dependency_name))
                        self._my_print('      Required: %s' % (sjconf.Type.Bool.bool_to_str({'optional': not dependency['dependency'].optional}, {}, 'optional')['optional']))
                        self._my_print('      Requirements: %s' % (', '.join(map(lambda (operator, version): operator + ' ' + version, dependency['dependency'].requirements.items()))))
                        self._my_print('      Installed version: %s' % ((dependency['plugin'] and dependency['plugin'].version()) or 'Not installed'))
                        if dependency['plugin']:
                            self._my_print('      Enabled: %s' % (sjconf.Type.Bool.bool_to_str(dependency, {}, 'is_enabled')['is_enabled']))
                        self._my_print('      State: %s' % ((dependency['state'] == True and 'OK') or 'Error: ' + str(dependency['state'])))

        if self.profiles_to_enable:
            for self.profile_to_enable in self.profiles_to_enable:
                self.sjconf.profile_enable(*self.profile_to_enable)

        if self.profiles_to_disable:
            for self.profile_to_disable in self.profiles_to_disable:
                self.sjconf.profile_disable(self.profile_to_disable)

        if self.profiles_list:
            profiles_list = self.sjconf.profiles_infos()
            for profile, level in profiles_list.iteritems():
                self._my_print('Profile %s' % (profile,))
                if level is not None:
                    self._my_print('  Enabled at level %s' % level)
                else:
                    self._my_print('  Not enabled')

        if self.get:
            if self.get[0] in self.sjconf.conf_local() and self.get[1] in self.sjconf.conf_local()[self.get[0]]:
                print self.sjconf.conf_local()[self.get[0]][self.get[1]]
            else:
                sys.exit(1)

        if self.sets or self.list_adds or self.list_removes or self.sequence_adds or self.sequence_removes or self.delete_keys or self.delete_sections or self.show_diff:
            self.sjconf.apply_conf_modifications(not self.save, sets = self.sets, list_adds = self.list_adds, list_removes = self.list_removes, sequence_adds = self.sequence_adds, sequence_removes = self.sequence_removes, delete_keys = self.delete_keys, delete_sections = self.delete_sections)

        if self.show_diff:
            print "############### local.conf diffs ################"
            os.system("diff -U -1 %s %s" % (self.sjconf.confs['local'].file_path, self.sjconf.temp_file_path))
            print "#################################################\n"

        if self.save:
            self._my_print('Configuration saved\n')
        elif self.changes:
            self._my_print("No configuration saved (use --save)\n")

        if not self.deploy and self.services_to_restart:
            self.sjconf.restart_services(self.services_to_restart)

        if not self.deploy and self.services_to_reload:
            self.sjconf.restart_services(self.services_to_reload, reload=True)

        if self.deploy:
            self.sjconf.deploy_conf(self.services_to_restart, self.services_to_reload, self.backup)

if __name__ == '__main__':
    try:
        sjconf_cli = SJConfCLI()
        sjconf_cli.run()
    except sjconf.Error, exception:
        if '--verbose' in sys.argv:
            raise
        print >> sys.stderr, 'Error: ' + str(exception) + '.'
        sys.exit(1)
